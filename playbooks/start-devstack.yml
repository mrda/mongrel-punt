---
- name: Prepare to run devstack
  hosts: localhost
  tasks:

  - pause:
      seconds: 30
      prompt: |
        *************************************************************************************
        *************************************************************************************
        **                                                                                 **
        **  WARNING: About to start devstack, this is NOT idempotent, '^C a' to exit now.  **
        **           Sleeping 30 seconds to give you time to stop this                     **
        **                                                                                 **
        *************************************************************************************
        *************************************************************************************

  - name: grab a routed IP address for the vm
    become: yes
    shell: |
        virsh domifaddr "{{ name }}" |
        tail -n +3 | awk '{print $4}' |
        cut -d'/' -f1 |
        while read ipa ; do
            ping -c1 $ipa >& /dev/null;
            [[ $? -eq 0 ]] && echo "$ipa" && break;
        done
    register: ip_addr
    delegate_to: localhost
    until: ip_addr.rc == 0
    delay: 10
    retries: 12

  - name: ensure we found an IP address for this vm
    fail: msg="Could not find IP Address for '{{ name }}'"
    when: ip_addr.stdout is not defined or ip_addr.stdout == ""

  - name: avoid the ssh host authentication query
    shell: |
      ssh -O exit "{{ ip_addr.stdout }}"
      ssh-keygen -R "{{ ip_addr.stdout }}"
      ssh -o StrictHostKeyChecking=no -v root@"{{ ip_addr.stdout }}" true
    register: ssh_result
    delegate_to: localhost
    failed_when: (ssh_result.rc != 255 and ssh_result.rc != 0)
    when: true  # avoid linting warning

  - name: Add VM ip address to new groups vms
    add_host:
      name: "{{ ip_addr.stdout }}"
      groups: vms

- name: Get Devstack ready for running
  remote_user: root
  hosts: vms
  tasks:

  - name: verify root can ssh into the new vm.  If not, you'll need to add that via an ssh-copy-id or similar outside these plays
    become: yes
    shell: date

  - name: clone devstack
    git:
      repo: https://opendev.org/openstack/devstack.git
      dest: /root/devstack

  - name: build devstack prerequisites - create-stack-user.sh
    become: yes
    shell: /root/devstack/tools/create-stack-user.sh
    register: createstackuser

  - name: ensure /opt/stack has the correct perms
    become: yes
    file:
      path: "/opt/stack"
      state: directory
      owner: stack
      group: stack
      mode: "u=rwx,g=rx,o=rx"

  - name: ensure stack has a .ssh directory
    become: yes
    file:
      path: "/opt/stack/.ssh"
      state: directory
      owner: stack
      group: stack
      mode: "u=rwx,og="

  - name: allow authorised stack logins
    become: yes
    copy:
        src: /root/.ssh/authorized_keys
        dest: /opt/stack/.ssh/authorized_keys
        remote_src: yes
        owner: stack
        group: stack
        mode: u=rw,og=

- name: Startup Devstack, patching for things that we want
  remote_user: stack
  hosts: vms
  tasks:

  - name: clone devstack
    git:
      repo: https://opendev.org/openstack/devstack.git
      dest: /opt/stack/devstack

  - name: Template copy an ironicised devstack's local.conf
    template:
        src: devstack/local.conf.ironic.j2
        dest: /opt/stack/devstack/local.conf

  - name: clone extra openstack repositories
    git:
      repo: "https://opendev.org/openstack/{{ item }}.git"
      dest: "/opt/stack/{{ item }}"
    with_items:
      - "{{ extra_openstack_pkgs }}"

  - name: ensure new required os-traits directory exists
    become: yes
    file:
      path: "/opt/stack/os-traits/os_traits/hw/cpu"
      state: directory
      owner: stack
      group: stack
      mode: "u=rwx,g=rx,o=rx"

  - name: copy in new code - os-traits ppc64le.py
    copy:
      src: files/ppc64le.py
      dest: /opt/stack/os-traits/os_traits/hw/cpu/ppc64le.py

  - name: ensure introspection rules directory exists
    become: yes
    file:
      path: "/opt/stack/introspection"
      state: directory
      owner: stack
      group: stack
      mode: "u=rwx,g=rx,o=rx"

  - name: copy in introspection rules
    copy:
      src: files/introspection-rules.json
      dest: /opt/stack/introspection/rules.json

# NOTE(mrda): As of 20190812, an f29 host does not properly bring up baremetal nodes
#             Specifically, they drop into "clean failed" state.  So, for now, we
#             don't automatically start devstack, as it'll never end, waiting for
#             nodes to become available.
#             Note this doesn't happen on an U1804 box, so it's Fedora specific, and
#             I haven't been able to work out why yet.
#
#- name: Start devstack
#  hosts: vms
#  remote_user: stack
#  tasks:
#
#  - name: start devstack
#    shell: ./stack.sh
#    args:
#        chdir: /opt/stack/devstack
#    register: stackoutout
#
#  - name: ensure devstack started correctly
#    fail: msg="devstack didn't succeed"
#    when: stackoutput.rc != 0

  - pause:
      seconds: 30
      prompt: |
        ******************************************************************************
        ******************************************************************************
        **                                                                          **
        **  We haven't started devstack, as an f29 host does not properly bring up  **
        **  baremetal nodes - instead they drop into "clean failed" state, and the  **
        **  stash.sh command never exits.                                           **
        **                                                                          **
        **  Instead, you should do the following, if you have built an U1804 vm:    **
        **    ssh $IPADDR                                                           **
        **    sudo su - stack                                                       **
        **    cd /opt/stack/devstack                                                **
        **    ./stack.sh                                                            **
        **                                                                          **
        ******************************************************************************
        ******************************************************************************

