---
- import_playbook: get-vm-ip-address.yml

- name: Get Devstack ready for running
  remote_user: root
  hosts: vms
  tasks:

  - name: verify root can ssh into the new vm.  If not, you'll need to add that via an ssh-copy-id or similar outside these plays
    become: yes
    shell: date

  - name: clone devstack
    git:
      repo: https://opendev.org/openstack/devstack.git
      dest: /root/devstack

  - name: build devstack prerequisites - create-stack-user.sh
    become: yes
    shell: /root/devstack/tools/create-stack-user.sh
    register: createstackuser

  - name: ensure /opt/stack has the correct perms
    become: yes
    file:
      path: "/opt/stack"
      state: directory
      owner: stack
      group: stack
      mode: "u=rwx,g=rx,o=rx"

  - name: ensure stack has a .ssh directory
    become: yes
    file:
      path: "/opt/stack/.ssh"
      state: directory
      owner: stack
      group: stack
      mode: "u=rwx,og="

  - name: allow authorised stack logins
    become: yes
    copy:
        src: /root/.ssh/authorized_keys
        dest: /opt/stack/.ssh/authorized_keys
        remote_src: yes
        owner: stack
        group: stack
        mode: u=rw,og=

- name: Clone and patch Devstack
  remote_user: stack
  hosts: vms
  tasks:

  - name: clone devstack
    git:
      repo: https://opendev.org/openstack/devstack.git
      dest: /opt/stack/devstack

  - name: Template copy an ironicised devstack's local.conf
    template:
        src: devstack/local.conf.ironic.j2
        dest: /opt/stack/devstack/local.conf

  - name: clone extra openstack repositories
    git:
      repo: "https://opendev.org/openstack/{{ item }}.git"
      dest: "/opt/stack/{{ item }}"
    with_items:
      - "{{ required_extra_openstack_pkgs }}"
      - "{{ patched_openstack_pkgs }}"
    ignore_errors: yes

  - name: clone extra non-openstack repositories
    git:
      repo: "{{ item.repo }}"
      dest: "/opt/stack/{{ item.name }}"
    with_items:
      - "{{ required_extra_repos }}"

  - name: Set up the user's name in git
    git_config:
      name: user.name
      value: "{{ git_user }}"
      scope: global

  - name: Set up the user's email in git
    git_config:
      name: user.email
      value: "{{ git_email }}"
      scope: global

  - name: cherry pick in patches from git repos
    shell: "cd /opt/stack/{{ item.repo }} && git fetch {{ item.cherry_pick }} && git cherry-pick FETCH_HEAD"
    with_items:
      - "{{ patches_to_apply }}"
    # We don't want to ignore errors here as if we are trying to cherry-pick in changes, we can't have local
    # conflicting changes

  - name: ensure introspection rules directory exists
    become: yes
    file:
      path: "/opt/stack/introspection"
      state: directory
      owner: stack
      group: stack
      mode: "u=rwx,g=rx,o=rx"

  - name: copy in introspection rules
    copy:
      src: files/introspection-rules.json
      dest: /opt/stack/introspection/rules.json

